application.yml 파일에 있는 데이터 가져오는 법
1. Environment
2. @Value 어노테이션 사용

JPA가 하는 역할
API에서 쿼리 없이 데이터베이스를 다를 수 있도록 지원해주는 도구

Request -> Dto -> Entity(database)

암호화 방식 : BCryptPasswordEncoder
- Password를 해싱하기 위해 Bcrypt 알고리즘 사용
- 랜덤 Salt를 부여하여 어러번 Hash를 적용한 암호화 방식
- 같은 데이터여도 암호화된 데이터는 다르게 파싱됨.

Bean 등록
Spring 2,3 버전 -> xml에서 처리
Spring 4 버전 -> 어노테이션으로 처리
Spring Boot -> 초기에 기동할 수 있는 클래스를 제어할 수 있음

RestApi
같은 URI를 사용해도 HTTP Method가 다르면 하나의 URI를 가지고 다양한 기능을 할 수 있음.
-> RestApi의 성숙도 모델 레벨 2

RestApi를 사용하여 클라이언트에게 값을 반환하다보면 null값이 있는 필드가 존재함.
-> 불필요한 데이터 => JsonInclude 어노테이션을 이용하여 null이 아닌 값만 반환

Override : 이미 등록되어있는 것을 재정의 -> 구현하지 않아도 오류가 발생하지 않음.
Implement : Interface에 있는것을 상속받아서 가져왔기 때문에 재정의를 해줘야지만 인스턴스화가 됨.


로그인 처리 과정
- Boot Application이 처음 기동이 되면서 Configuration과 관련있는 클래스들이 Bean으로 등록.
- 사용자가 로그인을 시도하게 되면 AuthenticationFilter 클래스가 제일 먼저 실행.
- 여기의 attempAuthentication() 메소드가 email과 password를 처리
- 그 후 입력된 email과 password를 UsernamePasswordAuthenticationToken형태로 변경하여 사용
- UserDetailService의 loadUserByUsername()메서드에서 findByEmail()을 이용해 데이터베이스의 Entity를 가져와 User로 변경해서 사용
- 정상적으로 로그인이 완료된다면, AuthenticationFilter의 successfulAuthentication() 메소드에서 email을 이용하여 Database에서 유저의 상세정보를 가져옴
- 가져온 UserId를 이용하여 jwt 토큰 생성 후 response의 Header값에 포함

전통적인 인증시스템
- 클라이언트가 이름, 비밀번호 등 정보를 가지고 인증 요청함
- 서버에서 데이터베이스에서 조회 후 존재한다면 쿠키나 세션을 클라이언트에게 전달해줌
- 클라이언트는 전달받은 쿠키나 세션으로 상세정보, 주문정보 등 정보를 서버에게 요청함
- 서버는 쿠키가 유효하고, 발급해준 것이 맞다고 판단되면 요청에 대한 정보를 전달해줌

전통적인 인증시스템의 문제
- 세션과 쿠키는 모바일 애플리케이션에서 유효하게 사용할 수 없음(이기종에서 공유 불가)
- 렌더링 된 HTML 페이지가 반환되지만, 모바일 애플리케이션에서는 JSON(OR XML)과 같은 포멧 필요
 -> 모바일은 별도의 플랫폼, 언어로 개발이 될 수 있기 때문임.

Token 기반 인증시스템
- 클라이언트가 이름, 비밀번호 등 정보를 가지고 인증 요청함
- 서버에서 데이터베이스에서 조회 후 존재한다면 쿠키를 발급
- 클라이언트는 토큰을 가지고 정보를 요청함
- 서버는 발급된 토큰이 정상적인지 확인 후 요청에 대한 정보를 전달

PAYLOAD : 전달되는 데이터

JWT 장점
- 클라이언트의 독립적인 서비스
- 지속적인 토큰 저장
- 사이트간 요청 위조가능성 적어짐
- 세션간의 공유가 가능해짐

Micro Service를 호출하는 방법
1. RespTemplate
2. FeignClient : Rest Call을 추상화 한 Spring Cloud Netflix 라이브러리
   - Load balanced 지원